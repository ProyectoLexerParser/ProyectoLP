Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> opt
Rule 1     opt -> assign
Rule 2     opt -> print
Rule 3     opt -> if
Rule 4     opt -> elif
Rule 5     opt -> else
Rule 6     assign -> var lista
Rule 7     assign -> var string
Rule 8     assign -> var float
Rule 9     assign -> var number
Rule 10    assign -> var bool
Rule 11    assign -> var diccionario
Rule 12    diccionario -> ILLAVE info DLLAVE
Rule 13    info -> keys TWOPOINT items
Rule 14    info -> keys TWOPOINT items COMA info
Rule 15    keys -> string
Rule 16    keys -> number
Rule 17    keys -> float
Rule 18    lista -> LCORCH contenido RCORCH
Rule 19    contenido -> items
Rule 20    contenido -> items COMA contenido
Rule 21    items -> string
Rule 22    items -> number
Rule 23    items -> float
Rule 24    items -> bool
Rule 25    items -> lista
Rule 26    print -> PRINT LPAREN string RPAREN
Rule 27    var -> text EQUALS
Rule 28    text -> NAME
Rule 29    string -> COMILLA text COMILLA
Rule 30    bool -> TRUE
Rule 31    bool -> FALSE
Rule 32    float -> FLOAT
Rule 33    number -> NUMBER
Rule 34    sentencia -> ESPACIO print
Rule 35    if -> IF LPAREN condicion RPAREN TWOPOINT
Rule 36    if -> IF condicion TWOPOINT
Rule 37    elif -> ELIF LPAREN condicion RPAREN TWOPOINT
Rule 38    elif -> ELIF condicion TWOPOINT
Rule 39    else -> ELSE TWOPOINT
Rule 40    condicion -> string IN string
Rule 41    condicion -> string IN lista
Rule 42    condicion -> number IN string
Rule 43    condicion -> bool IN lista
Rule 44    condicion -> float IN lista

Terminals, with rules where they appear

COMA                 : 14 20
COMILLA              : 29 29
DLLAVE               : 12
ELIF                 : 37 38
ELSE                 : 39
EQUALS               : 27
ESPACIO              : 34
FALSE                : 31
FLOAT                : 32
IF                   : 35 36
ILLAVE               : 12
IN                   : 40 41 42 43 44
LCORCH               : 18
LPAREN               : 26 35 37
NAME                 : 28
NUMBER               : 33
PRINT                : 26
RCORCH               : 18
RPAREN               : 26 35 37
TRUE                 : 30
TWOPOINT             : 13 14 35 36 37 38 39
error                : 

Nonterminals, with rules where they appear

assign               : 1
bool                 : 10 24 43
condicion            : 35 36 37 38
contenido            : 18 20
diccionario          : 11
elif                 : 4
else                 : 5
float                : 8 17 23 44
if                   : 3
info                 : 12 14
items                : 13 14 19 20
keys                 : 13 14
lista                : 6 25 41 43 44
number               : 9 16 22 42
opt                  : 0
print                : 2 34
sentencia            : 
string               : 7 15 21 26 40 40 41 42
text                 : 27 29
var                  : 6 7 8 9 10 11

Parsing method: LALR

state 0

    (0) S' -> . opt
    (1) opt -> . assign
    (2) opt -> . print
    (3) opt -> . if
    (4) opt -> . elif
    (5) opt -> . else
    (6) assign -> . var lista
    (7) assign -> . var string
    (8) assign -> . var float
    (9) assign -> . var number
    (10) assign -> . var bool
    (11) assign -> . var diccionario
    (26) print -> . PRINT LPAREN string RPAREN
    (35) if -> . IF LPAREN condicion RPAREN TWOPOINT
    (36) if -> . IF condicion TWOPOINT
    (37) elif -> . ELIF LPAREN condicion RPAREN TWOPOINT
    (38) elif -> . ELIF condicion TWOPOINT
    (39) else -> . ELSE TWOPOINT
    (27) var -> . text EQUALS
    (28) text -> . NAME

    PRINT           shift and go to state 8
    IF              shift and go to state 9
    ELIF            shift and go to state 10
    ELSE            shift and go to state 11
    NAME            shift and go to state 13

    opt                            shift and go to state 1
    assign                         shift and go to state 2
    print                          shift and go to state 3
    if                             shift and go to state 4
    elif                           shift and go to state 5
    else                           shift and go to state 6
    var                            shift and go to state 7
    text                           shift and go to state 12

state 1

    (0) S' -> opt .



state 2

    (1) opt -> assign .

    $end            reduce using rule 1 (opt -> assign .)


state 3

    (2) opt -> print .

    $end            reduce using rule 2 (opt -> print .)


state 4

    (3) opt -> if .

    $end            reduce using rule 3 (opt -> if .)


state 5

    (4) opt -> elif .

    $end            reduce using rule 4 (opt -> elif .)


state 6

    (5) opt -> else .

    $end            reduce using rule 5 (opt -> else .)


state 7

    (6) assign -> var . lista
    (7) assign -> var . string
    (8) assign -> var . float
    (9) assign -> var . number
    (10) assign -> var . bool
    (11) assign -> var . diccionario
    (18) lista -> . LCORCH contenido RCORCH
    (29) string -> . COMILLA text COMILLA
    (32) float -> . FLOAT
    (33) number -> . NUMBER
    (30) bool -> . TRUE
    (31) bool -> . FALSE
    (12) diccionario -> . ILLAVE info DLLAVE

    LCORCH          shift and go to state 20
    COMILLA         shift and go to state 21
    FLOAT           shift and go to state 22
    NUMBER          shift and go to state 23
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25
    ILLAVE          shift and go to state 26

    lista                          shift and go to state 14
    string                         shift and go to state 15
    float                          shift and go to state 16
    number                         shift and go to state 17
    bool                           shift and go to state 18
    diccionario                    shift and go to state 19

state 8

    (26) print -> PRINT . LPAREN string RPAREN

    LPAREN          shift and go to state 27


state 9

    (35) if -> IF . LPAREN condicion RPAREN TWOPOINT
    (36) if -> IF . condicion TWOPOINT
    (40) condicion -> . string IN string
    (41) condicion -> . string IN lista
    (42) condicion -> . number IN string
    (43) condicion -> . bool IN lista
    (44) condicion -> . float IN lista
    (29) string -> . COMILLA text COMILLA
    (33) number -> . NUMBER
    (30) bool -> . TRUE
    (31) bool -> . FALSE
    (32) float -> . FLOAT

    LPAREN          shift and go to state 28
    COMILLA         shift and go to state 21
    NUMBER          shift and go to state 23
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25
    FLOAT           shift and go to state 22

    condicion                      shift and go to state 29
    string                         shift and go to state 30
    number                         shift and go to state 31
    bool                           shift and go to state 32
    float                          shift and go to state 33

state 10

    (37) elif -> ELIF . LPAREN condicion RPAREN TWOPOINT
    (38) elif -> ELIF . condicion TWOPOINT
    (40) condicion -> . string IN string
    (41) condicion -> . string IN lista
    (42) condicion -> . number IN string
    (43) condicion -> . bool IN lista
    (44) condicion -> . float IN lista
    (29) string -> . COMILLA text COMILLA
    (33) number -> . NUMBER
    (30) bool -> . TRUE
    (31) bool -> . FALSE
    (32) float -> . FLOAT

    LPAREN          shift and go to state 34
    COMILLA         shift and go to state 21
    NUMBER          shift and go to state 23
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25
    FLOAT           shift and go to state 22

    condicion                      shift and go to state 35
    string                         shift and go to state 30
    number                         shift and go to state 31
    bool                           shift and go to state 32
    float                          shift and go to state 33

state 11

    (39) else -> ELSE . TWOPOINT

    TWOPOINT        shift and go to state 36


state 12

    (27) var -> text . EQUALS

    EQUALS          shift and go to state 37


state 13

    (28) text -> NAME .

    EQUALS          reduce using rule 28 (text -> NAME .)
    COMILLA         reduce using rule 28 (text -> NAME .)


state 14

    (6) assign -> var lista .

    $end            reduce using rule 6 (assign -> var lista .)


state 15

    (7) assign -> var string .

    $end            reduce using rule 7 (assign -> var string .)


state 16

    (8) assign -> var float .

    $end            reduce using rule 8 (assign -> var float .)


state 17

    (9) assign -> var number .

    $end            reduce using rule 9 (assign -> var number .)


state 18

    (10) assign -> var bool .

    $end            reduce using rule 10 (assign -> var bool .)


state 19

    (11) assign -> var diccionario .

    $end            reduce using rule 11 (assign -> var diccionario .)


state 20

    (18) lista -> LCORCH . contenido RCORCH
    (19) contenido -> . items
    (20) contenido -> . items COMA contenido
    (21) items -> . string
    (22) items -> . number
    (23) items -> . float
    (24) items -> . bool
    (25) items -> . lista
    (29) string -> . COMILLA text COMILLA
    (33) number -> . NUMBER
    (32) float -> . FLOAT
    (30) bool -> . TRUE
    (31) bool -> . FALSE
    (18) lista -> . LCORCH contenido RCORCH

    COMILLA         shift and go to state 21
    NUMBER          shift and go to state 23
    FLOAT           shift and go to state 22
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25
    LCORCH          shift and go to state 20

    contenido                      shift and go to state 38
    items                          shift and go to state 39
    string                         shift and go to state 40
    number                         shift and go to state 41
    float                          shift and go to state 42
    bool                           shift and go to state 43
    lista                          shift and go to state 44

state 21

    (29) string -> COMILLA . text COMILLA
    (28) text -> . NAME

    NAME            shift and go to state 13

    text                           shift and go to state 45

state 22

    (32) float -> FLOAT .

    $end            reduce using rule 32 (float -> FLOAT .)
    IN              reduce using rule 32 (float -> FLOAT .)
    COMA            reduce using rule 32 (float -> FLOAT .)
    RCORCH          reduce using rule 32 (float -> FLOAT .)
    TWOPOINT        reduce using rule 32 (float -> FLOAT .)
    DLLAVE          reduce using rule 32 (float -> FLOAT .)


state 23

    (33) number -> NUMBER .

    $end            reduce using rule 33 (number -> NUMBER .)
    IN              reduce using rule 33 (number -> NUMBER .)
    COMA            reduce using rule 33 (number -> NUMBER .)
    RCORCH          reduce using rule 33 (number -> NUMBER .)
    TWOPOINT        reduce using rule 33 (number -> NUMBER .)
    DLLAVE          reduce using rule 33 (number -> NUMBER .)


state 24

    (30) bool -> TRUE .

    $end            reduce using rule 30 (bool -> TRUE .)
    IN              reduce using rule 30 (bool -> TRUE .)
    COMA            reduce using rule 30 (bool -> TRUE .)
    RCORCH          reduce using rule 30 (bool -> TRUE .)
    DLLAVE          reduce using rule 30 (bool -> TRUE .)


state 25

    (31) bool -> FALSE .

    $end            reduce using rule 31 (bool -> FALSE .)
    IN              reduce using rule 31 (bool -> FALSE .)
    COMA            reduce using rule 31 (bool -> FALSE .)
    RCORCH          reduce using rule 31 (bool -> FALSE .)
    DLLAVE          reduce using rule 31 (bool -> FALSE .)


state 26

    (12) diccionario -> ILLAVE . info DLLAVE
    (13) info -> . keys TWOPOINT items
    (14) info -> . keys TWOPOINT items COMA info
    (15) keys -> . string
    (16) keys -> . number
    (17) keys -> . float
    (29) string -> . COMILLA text COMILLA
    (33) number -> . NUMBER
    (32) float -> . FLOAT

    COMILLA         shift and go to state 21
    NUMBER          shift and go to state 23
    FLOAT           shift and go to state 22

    info                           shift and go to state 46
    keys                           shift and go to state 47
    string                         shift and go to state 48
    number                         shift and go to state 49
    float                          shift and go to state 50

state 27

    (26) print -> PRINT LPAREN . string RPAREN
    (29) string -> . COMILLA text COMILLA

    COMILLA         shift and go to state 21

    string                         shift and go to state 51

state 28

    (35) if -> IF LPAREN . condicion RPAREN TWOPOINT
    (40) condicion -> . string IN string
    (41) condicion -> . string IN lista
    (42) condicion -> . number IN string
    (43) condicion -> . bool IN lista
    (44) condicion -> . float IN lista
    (29) string -> . COMILLA text COMILLA
    (33) number -> . NUMBER
    (30) bool -> . TRUE
    (31) bool -> . FALSE
    (32) float -> . FLOAT

    COMILLA         shift and go to state 21
    NUMBER          shift and go to state 23
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25
    FLOAT           shift and go to state 22

    condicion                      shift and go to state 52
    string                         shift and go to state 30
    number                         shift and go to state 31
    bool                           shift and go to state 32
    float                          shift and go to state 33

state 29

    (36) if -> IF condicion . TWOPOINT

    TWOPOINT        shift and go to state 53


state 30

    (40) condicion -> string . IN string
    (41) condicion -> string . IN lista

    IN              shift and go to state 54


state 31

    (42) condicion -> number . IN string

    IN              shift and go to state 55


state 32

    (43) condicion -> bool . IN lista

    IN              shift and go to state 56


state 33

    (44) condicion -> float . IN lista

    IN              shift and go to state 57


state 34

    (37) elif -> ELIF LPAREN . condicion RPAREN TWOPOINT
    (40) condicion -> . string IN string
    (41) condicion -> . string IN lista
    (42) condicion -> . number IN string
    (43) condicion -> . bool IN lista
    (44) condicion -> . float IN lista
    (29) string -> . COMILLA text COMILLA
    (33) number -> . NUMBER
    (30) bool -> . TRUE
    (31) bool -> . FALSE
    (32) float -> . FLOAT

    COMILLA         shift and go to state 21
    NUMBER          shift and go to state 23
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25
    FLOAT           shift and go to state 22

    condicion                      shift and go to state 58
    string                         shift and go to state 30
    number                         shift and go to state 31
    bool                           shift and go to state 32
    float                          shift and go to state 33

state 35

    (38) elif -> ELIF condicion . TWOPOINT

    TWOPOINT        shift and go to state 59


state 36

    (39) else -> ELSE TWOPOINT .

    $end            reduce using rule 39 (else -> ELSE TWOPOINT .)


state 37

    (27) var -> text EQUALS .

    LCORCH          reduce using rule 27 (var -> text EQUALS .)
    COMILLA         reduce using rule 27 (var -> text EQUALS .)
    FLOAT           reduce using rule 27 (var -> text EQUALS .)
    NUMBER          reduce using rule 27 (var -> text EQUALS .)
    TRUE            reduce using rule 27 (var -> text EQUALS .)
    FALSE           reduce using rule 27 (var -> text EQUALS .)
    ILLAVE          reduce using rule 27 (var -> text EQUALS .)


state 38

    (18) lista -> LCORCH contenido . RCORCH

    RCORCH          shift and go to state 60


state 39

    (19) contenido -> items .
    (20) contenido -> items . COMA contenido

    RCORCH          reduce using rule 19 (contenido -> items .)
    COMA            shift and go to state 61


state 40

    (21) items -> string .

    COMA            reduce using rule 21 (items -> string .)
    RCORCH          reduce using rule 21 (items -> string .)
    DLLAVE          reduce using rule 21 (items -> string .)


state 41

    (22) items -> number .

    COMA            reduce using rule 22 (items -> number .)
    RCORCH          reduce using rule 22 (items -> number .)
    DLLAVE          reduce using rule 22 (items -> number .)


state 42

    (23) items -> float .

    COMA            reduce using rule 23 (items -> float .)
    RCORCH          reduce using rule 23 (items -> float .)
    DLLAVE          reduce using rule 23 (items -> float .)


state 43

    (24) items -> bool .

    COMA            reduce using rule 24 (items -> bool .)
    RCORCH          reduce using rule 24 (items -> bool .)
    DLLAVE          reduce using rule 24 (items -> bool .)


state 44

    (25) items -> lista .

    COMA            reduce using rule 25 (items -> lista .)
    RCORCH          reduce using rule 25 (items -> lista .)
    DLLAVE          reduce using rule 25 (items -> lista .)


state 45

    (29) string -> COMILLA text . COMILLA

    COMILLA         shift and go to state 62


state 46

    (12) diccionario -> ILLAVE info . DLLAVE

    DLLAVE          shift and go to state 63


state 47

    (13) info -> keys . TWOPOINT items
    (14) info -> keys . TWOPOINT items COMA info

    TWOPOINT        shift and go to state 64


state 48

    (15) keys -> string .

    TWOPOINT        reduce using rule 15 (keys -> string .)


state 49

    (16) keys -> number .

    TWOPOINT        reduce using rule 16 (keys -> number .)


state 50

    (17) keys -> float .

    TWOPOINT        reduce using rule 17 (keys -> float .)


state 51

    (26) print -> PRINT LPAREN string . RPAREN

    RPAREN          shift and go to state 65


state 52

    (35) if -> IF LPAREN condicion . RPAREN TWOPOINT

    RPAREN          shift and go to state 66


state 53

    (36) if -> IF condicion TWOPOINT .

    $end            reduce using rule 36 (if -> IF condicion TWOPOINT .)


state 54

    (40) condicion -> string IN . string
    (41) condicion -> string IN . lista
    (29) string -> . COMILLA text COMILLA
    (18) lista -> . LCORCH contenido RCORCH

    COMILLA         shift and go to state 21
    LCORCH          shift and go to state 20

    string                         shift and go to state 67
    lista                          shift and go to state 68

state 55

    (42) condicion -> number IN . string
    (29) string -> . COMILLA text COMILLA

    COMILLA         shift and go to state 21

    string                         shift and go to state 69

state 56

    (43) condicion -> bool IN . lista
    (18) lista -> . LCORCH contenido RCORCH

    LCORCH          shift and go to state 20

    lista                          shift and go to state 70

state 57

    (44) condicion -> float IN . lista
    (18) lista -> . LCORCH contenido RCORCH

    LCORCH          shift and go to state 20

    lista                          shift and go to state 71

state 58

    (37) elif -> ELIF LPAREN condicion . RPAREN TWOPOINT

    RPAREN          shift and go to state 72


state 59

    (38) elif -> ELIF condicion TWOPOINT .

    $end            reduce using rule 38 (elif -> ELIF condicion TWOPOINT .)


state 60

    (18) lista -> LCORCH contenido RCORCH .

    $end            reduce using rule 18 (lista -> LCORCH contenido RCORCH .)
    COMA            reduce using rule 18 (lista -> LCORCH contenido RCORCH .)
    RCORCH          reduce using rule 18 (lista -> LCORCH contenido RCORCH .)
    TWOPOINT        reduce using rule 18 (lista -> LCORCH contenido RCORCH .)
    RPAREN          reduce using rule 18 (lista -> LCORCH contenido RCORCH .)
    DLLAVE          reduce using rule 18 (lista -> LCORCH contenido RCORCH .)


state 61

    (20) contenido -> items COMA . contenido
    (19) contenido -> . items
    (20) contenido -> . items COMA contenido
    (21) items -> . string
    (22) items -> . number
    (23) items -> . float
    (24) items -> . bool
    (25) items -> . lista
    (29) string -> . COMILLA text COMILLA
    (33) number -> . NUMBER
    (32) float -> . FLOAT
    (30) bool -> . TRUE
    (31) bool -> . FALSE
    (18) lista -> . LCORCH contenido RCORCH

    COMILLA         shift and go to state 21
    NUMBER          shift and go to state 23
    FLOAT           shift and go to state 22
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25
    LCORCH          shift and go to state 20

    items                          shift and go to state 39
    contenido                      shift and go to state 73
    string                         shift and go to state 40
    number                         shift and go to state 41
    float                          shift and go to state 42
    bool                           shift and go to state 43
    lista                          shift and go to state 44

state 62

    (29) string -> COMILLA text COMILLA .

    $end            reduce using rule 29 (string -> COMILLA text COMILLA .)
    IN              reduce using rule 29 (string -> COMILLA text COMILLA .)
    COMA            reduce using rule 29 (string -> COMILLA text COMILLA .)
    RCORCH          reduce using rule 29 (string -> COMILLA text COMILLA .)
    TWOPOINT        reduce using rule 29 (string -> COMILLA text COMILLA .)
    RPAREN          reduce using rule 29 (string -> COMILLA text COMILLA .)
    DLLAVE          reduce using rule 29 (string -> COMILLA text COMILLA .)


state 63

    (12) diccionario -> ILLAVE info DLLAVE .

    $end            reduce using rule 12 (diccionario -> ILLAVE info DLLAVE .)


state 64

    (13) info -> keys TWOPOINT . items
    (14) info -> keys TWOPOINT . items COMA info
    (21) items -> . string
    (22) items -> . number
    (23) items -> . float
    (24) items -> . bool
    (25) items -> . lista
    (29) string -> . COMILLA text COMILLA
    (33) number -> . NUMBER
    (32) float -> . FLOAT
    (30) bool -> . TRUE
    (31) bool -> . FALSE
    (18) lista -> . LCORCH contenido RCORCH

    COMILLA         shift and go to state 21
    NUMBER          shift and go to state 23
    FLOAT           shift and go to state 22
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25
    LCORCH          shift and go to state 20

    items                          shift and go to state 74
    string                         shift and go to state 40
    number                         shift and go to state 41
    float                          shift and go to state 42
    bool                           shift and go to state 43
    lista                          shift and go to state 44

state 65

    (26) print -> PRINT LPAREN string RPAREN .

    $end            reduce using rule 26 (print -> PRINT LPAREN string RPAREN .)


state 66

    (35) if -> IF LPAREN condicion RPAREN . TWOPOINT

    TWOPOINT        shift and go to state 75


state 67

    (40) condicion -> string IN string .

    TWOPOINT        reduce using rule 40 (condicion -> string IN string .)
    RPAREN          reduce using rule 40 (condicion -> string IN string .)


state 68

    (41) condicion -> string IN lista .

    TWOPOINT        reduce using rule 41 (condicion -> string IN lista .)
    RPAREN          reduce using rule 41 (condicion -> string IN lista .)


state 69

    (42) condicion -> number IN string .

    TWOPOINT        reduce using rule 42 (condicion -> number IN string .)
    RPAREN          reduce using rule 42 (condicion -> number IN string .)


state 70

    (43) condicion -> bool IN lista .

    TWOPOINT        reduce using rule 43 (condicion -> bool IN lista .)
    RPAREN          reduce using rule 43 (condicion -> bool IN lista .)


state 71

    (44) condicion -> float IN lista .

    TWOPOINT        reduce using rule 44 (condicion -> float IN lista .)
    RPAREN          reduce using rule 44 (condicion -> float IN lista .)


state 72

    (37) elif -> ELIF LPAREN condicion RPAREN . TWOPOINT

    TWOPOINT        shift and go to state 76


state 73

    (20) contenido -> items COMA contenido .

    RCORCH          reduce using rule 20 (contenido -> items COMA contenido .)


state 74

    (13) info -> keys TWOPOINT items .
    (14) info -> keys TWOPOINT items . COMA info

    DLLAVE          reduce using rule 13 (info -> keys TWOPOINT items .)
    COMA            shift and go to state 77


state 75

    (35) if -> IF LPAREN condicion RPAREN TWOPOINT .

    $end            reduce using rule 35 (if -> IF LPAREN condicion RPAREN TWOPOINT .)


state 76

    (37) elif -> ELIF LPAREN condicion RPAREN TWOPOINT .

    $end            reduce using rule 37 (elif -> ELIF LPAREN condicion RPAREN TWOPOINT .)


state 77

    (14) info -> keys TWOPOINT items COMA . info
    (13) info -> . keys TWOPOINT items
    (14) info -> . keys TWOPOINT items COMA info
    (15) keys -> . string
    (16) keys -> . number
    (17) keys -> . float
    (29) string -> . COMILLA text COMILLA
    (33) number -> . NUMBER
    (32) float -> . FLOAT

    COMILLA         shift and go to state 21
    NUMBER          shift and go to state 23
    FLOAT           shift and go to state 22

    keys                           shift and go to state 47
    info                           shift and go to state 78
    string                         shift and go to state 48
    number                         shift and go to state 49
    float                          shift and go to state 50

state 78

    (14) info -> keys TWOPOINT items COMA info .

    DLLAVE          reduce using rule 14 (info -> keys TWOPOINT items COMA info .)

