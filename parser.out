Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> opt
Rule 1     opt -> assign
Rule 2     opt -> print
Rule 3     opt -> if
Rule 4     opt -> elif
Rule 5     opt -> else
Rule 6     opt -> for
Rule 7     opt -> lista
Rule 8     assign -> var lista
Rule 9     assign -> var string
Rule 10    assign -> var float
Rule 11    assign -> var number
Rule 12    assign -> var bool
Rule 13    assign -> var diccionario
Rule 14    assign -> var input
Rule 15    input -> INPUT LPAREN string RPAREN
Rule 16    diccionario -> ILLAVE info DLLAVE
Rule 17    info -> keys TWOPOINT items
Rule 18    info -> keys TWOPOINT items COMA info
Rule 19    keys -> string
Rule 20    keys -> number
Rule 21    keys -> float
Rule 22    lista -> LCORCH contenido RCORCH
Rule 23    contenido -> items
Rule 24    contenido -> items COMA contenido
Rule 25    items -> string
Rule 26    items -> number
Rule 27    items -> float
Rule 28    items -> bool
Rule 29    items -> lista
Rule 30    print -> PRINT LPAREN string RPAREN
Rule 31    var -> text EQUALS
Rule 32    text -> NAME
Rule 33    string -> COMILLA text COMILLA
Rule 34    bool -> TRUE
Rule 35    bool -> FALSE
Rule 36    float -> FLOAT
Rule 37    number -> NUMBER
Rule 38    sentencia -> ESPACIO print
Rule 39    for -> FOR LPAREN condicionfor RPAREN TWOPOINT
Rule 40    for -> FOR condicionfor TWOPOINT
Rule 41    condicionfor -> NAME COMA NAME IN funcionitems
Rule 42    funcionitems -> NAME POINT ITEMS LPAREN RPAREN
Rule 43    if -> IF LPAREN condicion RPAREN TWOPOINT
Rule 44    if -> IF condicion TWOPOINT
Rule 45    elif -> ELIF LPAREN condicion RPAREN TWOPOINT
Rule 46    elif -> ELIF condicion TWOPOINT
Rule 47    else -> ELSE TWOPOINT
Rule 48    condicion -> string IN string
Rule 49    condicion -> NAME IN lista
Rule 50    condicion -> NAME IN string
Rule 51    condicion -> string IN lista
Rule 52    condicion -> number IN string
Rule 53    condicion -> bool IN lista
Rule 54    condicion -> float IN lista
Rule 55    condicion -> NAME IN NAME

Terminals, with rules where they appear

COMA                 : 18 24 41
COMILLA              : 33 33
DLLAVE               : 16
ELIF                 : 45 46
ELSE                 : 47
EQUALS               : 31
ESPACIO              : 38
FALSE                : 35
FLOAT                : 36
FOR                  : 39 40
IF                   : 43 44
ILLAVE               : 16
IN                   : 41 48 49 50 51 52 53 54 55
INPUT                : 15
ITEMS                : 42
LCORCH               : 22
LPAREN               : 15 30 39 42 43 45
NAME                 : 32 41 41 42 49 50 55 55
NUMBER               : 37
POINT                : 42
PRINT                : 30
RCORCH               : 22
RPAREN               : 15 30 39 42 43 45
TRUE                 : 34
TWOPOINT             : 17 18 39 40 43 44 45 46 47
error                : 

Nonterminals, with rules where they appear

assign               : 1
bool                 : 12 28 53
condicion            : 43 44 45 46
condicionfor         : 39 40
contenido            : 22 24
diccionario          : 13
elif                 : 4
else                 : 5
float                : 10 21 27 54
for                  : 6
funcionitems         : 41
if                   : 3
info                 : 16 18
input                : 14
items                : 17 18 23 24
keys                 : 17 18
lista                : 7 8 29 49 51 53 54
number               : 11 20 26 52
opt                  : 0
print                : 2 38
sentencia            : 
string               : 9 15 19 25 30 48 48 50 51 52
text                 : 31 33
var                  : 8 9 10 11 12 13 14

Parsing method: LALR

state 0

    (0) S' -> . opt
    (1) opt -> . assign
    (2) opt -> . print
    (3) opt -> . if
    (4) opt -> . elif
    (5) opt -> . else
    (6) opt -> . for
    (7) opt -> . lista
    (8) assign -> . var lista
    (9) assign -> . var string
    (10) assign -> . var float
    (11) assign -> . var number
    (12) assign -> . var bool
    (13) assign -> . var diccionario
    (14) assign -> . var input
    (30) print -> . PRINT LPAREN string RPAREN
    (43) if -> . IF LPAREN condicion RPAREN TWOPOINT
    (44) if -> . IF condicion TWOPOINT
    (45) elif -> . ELIF LPAREN condicion RPAREN TWOPOINT
    (46) elif -> . ELIF condicion TWOPOINT
    (47) else -> . ELSE TWOPOINT
    (39) for -> . FOR LPAREN condicionfor RPAREN TWOPOINT
    (40) for -> . FOR condicionfor TWOPOINT
    (22) lista -> . LCORCH contenido RCORCH
    (31) var -> . text EQUALS
    (32) text -> . NAME

    PRINT           shift and go to state 10
    IF              shift and go to state 11
    ELIF            shift and go to state 12
    ELSE            shift and go to state 13
    FOR             shift and go to state 14
    LCORCH          shift and go to state 15
    NAME            shift and go to state 17

    opt                            shift and go to state 1
    assign                         shift and go to state 2
    print                          shift and go to state 3
    if                             shift and go to state 4
    elif                           shift and go to state 5
    else                           shift and go to state 6
    for                            shift and go to state 7
    lista                          shift and go to state 8
    var                            shift and go to state 9
    text                           shift and go to state 16

state 1

    (0) S' -> opt .



state 2

    (1) opt -> assign .

    $end            reduce using rule 1 (opt -> assign .)


state 3

    (2) opt -> print .

    $end            reduce using rule 2 (opt -> print .)


state 4

    (3) opt -> if .

    $end            reduce using rule 3 (opt -> if .)


state 5

    (4) opt -> elif .

    $end            reduce using rule 4 (opt -> elif .)


state 6

    (5) opt -> else .

    $end            reduce using rule 5 (opt -> else .)


state 7

    (6) opt -> for .

    $end            reduce using rule 6 (opt -> for .)


state 8

    (7) opt -> lista .

    $end            reduce using rule 7 (opt -> lista .)


state 9

    (8) assign -> var . lista
    (9) assign -> var . string
    (10) assign -> var . float
    (11) assign -> var . number
    (12) assign -> var . bool
    (13) assign -> var . diccionario
    (14) assign -> var . input
    (22) lista -> . LCORCH contenido RCORCH
    (33) string -> . COMILLA text COMILLA
    (36) float -> . FLOAT
    (37) number -> . NUMBER
    (34) bool -> . TRUE
    (35) bool -> . FALSE
    (16) diccionario -> . ILLAVE info DLLAVE
    (15) input -> . INPUT LPAREN string RPAREN

    LCORCH          shift and go to state 15
    COMILLA         shift and go to state 25
    FLOAT           shift and go to state 26
    NUMBER          shift and go to state 27
    TRUE            shift and go to state 28
    FALSE           shift and go to state 29
    ILLAVE          shift and go to state 30
    INPUT           shift and go to state 31

    lista                          shift and go to state 18
    string                         shift and go to state 19
    float                          shift and go to state 20
    number                         shift and go to state 21
    bool                           shift and go to state 22
    diccionario                    shift and go to state 23
    input                          shift and go to state 24

state 10

    (30) print -> PRINT . LPAREN string RPAREN

    LPAREN          shift and go to state 32


state 11

    (43) if -> IF . LPAREN condicion RPAREN TWOPOINT
    (44) if -> IF . condicion TWOPOINT
    (48) condicion -> . string IN string
    (49) condicion -> . NAME IN lista
    (50) condicion -> . NAME IN string
    (51) condicion -> . string IN lista
    (52) condicion -> . number IN string
    (53) condicion -> . bool IN lista
    (54) condicion -> . float IN lista
    (55) condicion -> . NAME IN NAME
    (33) string -> . COMILLA text COMILLA
    (37) number -> . NUMBER
    (34) bool -> . TRUE
    (35) bool -> . FALSE
    (36) float -> . FLOAT

    LPAREN          shift and go to state 33
    NAME            shift and go to state 36
    COMILLA         shift and go to state 25
    NUMBER          shift and go to state 27
    TRUE            shift and go to state 28
    FALSE           shift and go to state 29
    FLOAT           shift and go to state 26

    condicion                      shift and go to state 34
    string                         shift and go to state 35
    number                         shift and go to state 37
    bool                           shift and go to state 38
    float                          shift and go to state 39

state 12

    (45) elif -> ELIF . LPAREN condicion RPAREN TWOPOINT
    (46) elif -> ELIF . condicion TWOPOINT
    (48) condicion -> . string IN string
    (49) condicion -> . NAME IN lista
    (50) condicion -> . NAME IN string
    (51) condicion -> . string IN lista
    (52) condicion -> . number IN string
    (53) condicion -> . bool IN lista
    (54) condicion -> . float IN lista
    (55) condicion -> . NAME IN NAME
    (33) string -> . COMILLA text COMILLA
    (37) number -> . NUMBER
    (34) bool -> . TRUE
    (35) bool -> . FALSE
    (36) float -> . FLOAT

    LPAREN          shift and go to state 40
    NAME            shift and go to state 36
    COMILLA         shift and go to state 25
    NUMBER          shift and go to state 27
    TRUE            shift and go to state 28
    FALSE           shift and go to state 29
    FLOAT           shift and go to state 26

    condicion                      shift and go to state 41
    string                         shift and go to state 35
    number                         shift and go to state 37
    bool                           shift and go to state 38
    float                          shift and go to state 39

state 13

    (47) else -> ELSE . TWOPOINT

    TWOPOINT        shift and go to state 42


state 14

    (39) for -> FOR . LPAREN condicionfor RPAREN TWOPOINT
    (40) for -> FOR . condicionfor TWOPOINT
    (41) condicionfor -> . NAME COMA NAME IN funcionitems

    LPAREN          shift and go to state 43
    NAME            shift and go to state 45

    condicionfor                   shift and go to state 44

state 15

    (22) lista -> LCORCH . contenido RCORCH
    (23) contenido -> . items
    (24) contenido -> . items COMA contenido
    (25) items -> . string
    (26) items -> . number
    (27) items -> . float
    (28) items -> . bool
    (29) items -> . lista
    (33) string -> . COMILLA text COMILLA
    (37) number -> . NUMBER
    (36) float -> . FLOAT
    (34) bool -> . TRUE
    (35) bool -> . FALSE
    (22) lista -> . LCORCH contenido RCORCH

    COMILLA         shift and go to state 25
    NUMBER          shift and go to state 27
    FLOAT           shift and go to state 26
    TRUE            shift and go to state 28
    FALSE           shift and go to state 29
    LCORCH          shift and go to state 15

    contenido                      shift and go to state 46
    items                          shift and go to state 47
    string                         shift and go to state 48
    number                         shift and go to state 49
    float                          shift and go to state 50
    bool                           shift and go to state 51
    lista                          shift and go to state 52

state 16

    (31) var -> text . EQUALS

    EQUALS          shift and go to state 53


state 17

    (32) text -> NAME .

    EQUALS          reduce using rule 32 (text -> NAME .)
    COMILLA         reduce using rule 32 (text -> NAME .)


state 18

    (8) assign -> var lista .

    $end            reduce using rule 8 (assign -> var lista .)


state 19

    (9) assign -> var string .

    $end            reduce using rule 9 (assign -> var string .)


state 20

    (10) assign -> var float .

    $end            reduce using rule 10 (assign -> var float .)


state 21

    (11) assign -> var number .

    $end            reduce using rule 11 (assign -> var number .)


state 22

    (12) assign -> var bool .

    $end            reduce using rule 12 (assign -> var bool .)


state 23

    (13) assign -> var diccionario .

    $end            reduce using rule 13 (assign -> var diccionario .)


state 24

    (14) assign -> var input .

    $end            reduce using rule 14 (assign -> var input .)


state 25

    (33) string -> COMILLA . text COMILLA
    (32) text -> . NAME

    NAME            shift and go to state 17

    text                           shift and go to state 54

state 26

    (36) float -> FLOAT .

    $end            reduce using rule 36 (float -> FLOAT .)
    IN              reduce using rule 36 (float -> FLOAT .)
    COMA            reduce using rule 36 (float -> FLOAT .)
    RCORCH          reduce using rule 36 (float -> FLOAT .)
    TWOPOINT        reduce using rule 36 (float -> FLOAT .)
    DLLAVE          reduce using rule 36 (float -> FLOAT .)


state 27

    (37) number -> NUMBER .

    $end            reduce using rule 37 (number -> NUMBER .)
    IN              reduce using rule 37 (number -> NUMBER .)
    COMA            reduce using rule 37 (number -> NUMBER .)
    RCORCH          reduce using rule 37 (number -> NUMBER .)
    TWOPOINT        reduce using rule 37 (number -> NUMBER .)
    DLLAVE          reduce using rule 37 (number -> NUMBER .)


state 28

    (34) bool -> TRUE .

    $end            reduce using rule 34 (bool -> TRUE .)
    IN              reduce using rule 34 (bool -> TRUE .)
    COMA            reduce using rule 34 (bool -> TRUE .)
    RCORCH          reduce using rule 34 (bool -> TRUE .)
    DLLAVE          reduce using rule 34 (bool -> TRUE .)


state 29

    (35) bool -> FALSE .

    $end            reduce using rule 35 (bool -> FALSE .)
    IN              reduce using rule 35 (bool -> FALSE .)
    COMA            reduce using rule 35 (bool -> FALSE .)
    RCORCH          reduce using rule 35 (bool -> FALSE .)
    DLLAVE          reduce using rule 35 (bool -> FALSE .)


state 30

    (16) diccionario -> ILLAVE . info DLLAVE
    (17) info -> . keys TWOPOINT items
    (18) info -> . keys TWOPOINT items COMA info
    (19) keys -> . string
    (20) keys -> . number
    (21) keys -> . float
    (33) string -> . COMILLA text COMILLA
    (37) number -> . NUMBER
    (36) float -> . FLOAT

    COMILLA         shift and go to state 25
    NUMBER          shift and go to state 27
    FLOAT           shift and go to state 26

    info                           shift and go to state 55
    keys                           shift and go to state 56
    string                         shift and go to state 57
    number                         shift and go to state 58
    float                          shift and go to state 59

state 31

    (15) input -> INPUT . LPAREN string RPAREN

    LPAREN          shift and go to state 60


state 32

    (30) print -> PRINT LPAREN . string RPAREN
    (33) string -> . COMILLA text COMILLA

    COMILLA         shift and go to state 25

    string                         shift and go to state 61

state 33

    (43) if -> IF LPAREN . condicion RPAREN TWOPOINT
    (48) condicion -> . string IN string
    (49) condicion -> . NAME IN lista
    (50) condicion -> . NAME IN string
    (51) condicion -> . string IN lista
    (52) condicion -> . number IN string
    (53) condicion -> . bool IN lista
    (54) condicion -> . float IN lista
    (55) condicion -> . NAME IN NAME
    (33) string -> . COMILLA text COMILLA
    (37) number -> . NUMBER
    (34) bool -> . TRUE
    (35) bool -> . FALSE
    (36) float -> . FLOAT

    NAME            shift and go to state 36
    COMILLA         shift and go to state 25
    NUMBER          shift and go to state 27
    TRUE            shift and go to state 28
    FALSE           shift and go to state 29
    FLOAT           shift and go to state 26

    condicion                      shift and go to state 62
    string                         shift and go to state 35
    number                         shift and go to state 37
    bool                           shift and go to state 38
    float                          shift and go to state 39

state 34

    (44) if -> IF condicion . TWOPOINT

    TWOPOINT        shift and go to state 63


state 35

    (48) condicion -> string . IN string
    (51) condicion -> string . IN lista

    IN              shift and go to state 64


state 36

    (49) condicion -> NAME . IN lista
    (50) condicion -> NAME . IN string
    (55) condicion -> NAME . IN NAME

    IN              shift and go to state 65


state 37

    (52) condicion -> number . IN string

    IN              shift and go to state 66


state 38

    (53) condicion -> bool . IN lista

    IN              shift and go to state 67


state 39

    (54) condicion -> float . IN lista

    IN              shift and go to state 68


state 40

    (45) elif -> ELIF LPAREN . condicion RPAREN TWOPOINT
    (48) condicion -> . string IN string
    (49) condicion -> . NAME IN lista
    (50) condicion -> . NAME IN string
    (51) condicion -> . string IN lista
    (52) condicion -> . number IN string
    (53) condicion -> . bool IN lista
    (54) condicion -> . float IN lista
    (55) condicion -> . NAME IN NAME
    (33) string -> . COMILLA text COMILLA
    (37) number -> . NUMBER
    (34) bool -> . TRUE
    (35) bool -> . FALSE
    (36) float -> . FLOAT

    NAME            shift and go to state 36
    COMILLA         shift and go to state 25
    NUMBER          shift and go to state 27
    TRUE            shift and go to state 28
    FALSE           shift and go to state 29
    FLOAT           shift and go to state 26

    condicion                      shift and go to state 69
    string                         shift and go to state 35
    number                         shift and go to state 37
    bool                           shift and go to state 38
    float                          shift and go to state 39

state 41

    (46) elif -> ELIF condicion . TWOPOINT

    TWOPOINT        shift and go to state 70


state 42

    (47) else -> ELSE TWOPOINT .

    $end            reduce using rule 47 (else -> ELSE TWOPOINT .)


state 43

    (39) for -> FOR LPAREN . condicionfor RPAREN TWOPOINT
    (41) condicionfor -> . NAME COMA NAME IN funcionitems

    NAME            shift and go to state 45

    condicionfor                   shift and go to state 71

state 44

    (40) for -> FOR condicionfor . TWOPOINT

    TWOPOINT        shift and go to state 72


state 45

    (41) condicionfor -> NAME . COMA NAME IN funcionitems

    COMA            shift and go to state 73


state 46

    (22) lista -> LCORCH contenido . RCORCH

    RCORCH          shift and go to state 74


state 47

    (23) contenido -> items .
    (24) contenido -> items . COMA contenido

    RCORCH          reduce using rule 23 (contenido -> items .)
    COMA            shift and go to state 75


state 48

    (25) items -> string .

    COMA            reduce using rule 25 (items -> string .)
    RCORCH          reduce using rule 25 (items -> string .)
    DLLAVE          reduce using rule 25 (items -> string .)


state 49

    (26) items -> number .

    COMA            reduce using rule 26 (items -> number .)
    RCORCH          reduce using rule 26 (items -> number .)
    DLLAVE          reduce using rule 26 (items -> number .)


state 50

    (27) items -> float .

    COMA            reduce using rule 27 (items -> float .)
    RCORCH          reduce using rule 27 (items -> float .)
    DLLAVE          reduce using rule 27 (items -> float .)


state 51

    (28) items -> bool .

    COMA            reduce using rule 28 (items -> bool .)
    RCORCH          reduce using rule 28 (items -> bool .)
    DLLAVE          reduce using rule 28 (items -> bool .)


state 52

    (29) items -> lista .

    COMA            reduce using rule 29 (items -> lista .)
    RCORCH          reduce using rule 29 (items -> lista .)
    DLLAVE          reduce using rule 29 (items -> lista .)


state 53

    (31) var -> text EQUALS .

    LCORCH          reduce using rule 31 (var -> text EQUALS .)
    COMILLA         reduce using rule 31 (var -> text EQUALS .)
    FLOAT           reduce using rule 31 (var -> text EQUALS .)
    NUMBER          reduce using rule 31 (var -> text EQUALS .)
    TRUE            reduce using rule 31 (var -> text EQUALS .)
    FALSE           reduce using rule 31 (var -> text EQUALS .)
    ILLAVE          reduce using rule 31 (var -> text EQUALS .)
    INPUT           reduce using rule 31 (var -> text EQUALS .)


state 54

    (33) string -> COMILLA text . COMILLA

    COMILLA         shift and go to state 76


state 55

    (16) diccionario -> ILLAVE info . DLLAVE

    DLLAVE          shift and go to state 77


state 56

    (17) info -> keys . TWOPOINT items
    (18) info -> keys . TWOPOINT items COMA info

    TWOPOINT        shift and go to state 78


state 57

    (19) keys -> string .

    TWOPOINT        reduce using rule 19 (keys -> string .)


state 58

    (20) keys -> number .

    TWOPOINT        reduce using rule 20 (keys -> number .)


state 59

    (21) keys -> float .

    TWOPOINT        reduce using rule 21 (keys -> float .)


state 60

    (15) input -> INPUT LPAREN . string RPAREN
    (33) string -> . COMILLA text COMILLA

    COMILLA         shift and go to state 25

    string                         shift and go to state 79

state 61

    (30) print -> PRINT LPAREN string . RPAREN

    RPAREN          shift and go to state 80


state 62

    (43) if -> IF LPAREN condicion . RPAREN TWOPOINT

    RPAREN          shift and go to state 81


state 63

    (44) if -> IF condicion TWOPOINT .

    $end            reduce using rule 44 (if -> IF condicion TWOPOINT .)


state 64

    (48) condicion -> string IN . string
    (51) condicion -> string IN . lista
    (33) string -> . COMILLA text COMILLA
    (22) lista -> . LCORCH contenido RCORCH

    COMILLA         shift and go to state 25
    LCORCH          shift and go to state 15

    string                         shift and go to state 82
    lista                          shift and go to state 83

state 65

    (49) condicion -> NAME IN . lista
    (50) condicion -> NAME IN . string
    (55) condicion -> NAME IN . NAME
    (22) lista -> . LCORCH contenido RCORCH
    (33) string -> . COMILLA text COMILLA

    NAME            shift and go to state 84
    LCORCH          shift and go to state 15
    COMILLA         shift and go to state 25

    lista                          shift and go to state 85
    string                         shift and go to state 86

state 66

    (52) condicion -> number IN . string
    (33) string -> . COMILLA text COMILLA

    COMILLA         shift and go to state 25

    string                         shift and go to state 87

state 67

    (53) condicion -> bool IN . lista
    (22) lista -> . LCORCH contenido RCORCH

    LCORCH          shift and go to state 15

    lista                          shift and go to state 88

state 68

    (54) condicion -> float IN . lista
    (22) lista -> . LCORCH contenido RCORCH

    LCORCH          shift and go to state 15

    lista                          shift and go to state 89

state 69

    (45) elif -> ELIF LPAREN condicion . RPAREN TWOPOINT

    RPAREN          shift and go to state 90


state 70

    (46) elif -> ELIF condicion TWOPOINT .

    $end            reduce using rule 46 (elif -> ELIF condicion TWOPOINT .)


state 71

    (39) for -> FOR LPAREN condicionfor . RPAREN TWOPOINT

    RPAREN          shift and go to state 91


state 72

    (40) for -> FOR condicionfor TWOPOINT .

    $end            reduce using rule 40 (for -> FOR condicionfor TWOPOINT .)


state 73

    (41) condicionfor -> NAME COMA . NAME IN funcionitems

    NAME            shift and go to state 92


state 74

    (22) lista -> LCORCH contenido RCORCH .

    $end            reduce using rule 22 (lista -> LCORCH contenido RCORCH .)
    COMA            reduce using rule 22 (lista -> LCORCH contenido RCORCH .)
    RCORCH          reduce using rule 22 (lista -> LCORCH contenido RCORCH .)
    TWOPOINT        reduce using rule 22 (lista -> LCORCH contenido RCORCH .)
    RPAREN          reduce using rule 22 (lista -> LCORCH contenido RCORCH .)
    DLLAVE          reduce using rule 22 (lista -> LCORCH contenido RCORCH .)


state 75

    (24) contenido -> items COMA . contenido
    (23) contenido -> . items
    (24) contenido -> . items COMA contenido
    (25) items -> . string
    (26) items -> . number
    (27) items -> . float
    (28) items -> . bool
    (29) items -> . lista
    (33) string -> . COMILLA text COMILLA
    (37) number -> . NUMBER
    (36) float -> . FLOAT
    (34) bool -> . TRUE
    (35) bool -> . FALSE
    (22) lista -> . LCORCH contenido RCORCH

    COMILLA         shift and go to state 25
    NUMBER          shift and go to state 27
    FLOAT           shift and go to state 26
    TRUE            shift and go to state 28
    FALSE           shift and go to state 29
    LCORCH          shift and go to state 15

    items                          shift and go to state 47
    contenido                      shift and go to state 93
    string                         shift and go to state 48
    number                         shift and go to state 49
    float                          shift and go to state 50
    bool                           shift and go to state 51
    lista                          shift and go to state 52

state 76

    (33) string -> COMILLA text COMILLA .

    $end            reduce using rule 33 (string -> COMILLA text COMILLA .)
    IN              reduce using rule 33 (string -> COMILLA text COMILLA .)
    COMA            reduce using rule 33 (string -> COMILLA text COMILLA .)
    RCORCH          reduce using rule 33 (string -> COMILLA text COMILLA .)
    TWOPOINT        reduce using rule 33 (string -> COMILLA text COMILLA .)
    RPAREN          reduce using rule 33 (string -> COMILLA text COMILLA .)
    DLLAVE          reduce using rule 33 (string -> COMILLA text COMILLA .)


state 77

    (16) diccionario -> ILLAVE info DLLAVE .

    $end            reduce using rule 16 (diccionario -> ILLAVE info DLLAVE .)


state 78

    (17) info -> keys TWOPOINT . items
    (18) info -> keys TWOPOINT . items COMA info
    (25) items -> . string
    (26) items -> . number
    (27) items -> . float
    (28) items -> . bool
    (29) items -> . lista
    (33) string -> . COMILLA text COMILLA
    (37) number -> . NUMBER
    (36) float -> . FLOAT
    (34) bool -> . TRUE
    (35) bool -> . FALSE
    (22) lista -> . LCORCH contenido RCORCH

    COMILLA         shift and go to state 25
    NUMBER          shift and go to state 27
    FLOAT           shift and go to state 26
    TRUE            shift and go to state 28
    FALSE           shift and go to state 29
    LCORCH          shift and go to state 15

    items                          shift and go to state 94
    string                         shift and go to state 48
    number                         shift and go to state 49
    float                          shift and go to state 50
    bool                           shift and go to state 51
    lista                          shift and go to state 52

state 79

    (15) input -> INPUT LPAREN string . RPAREN

    RPAREN          shift and go to state 95


state 80

    (30) print -> PRINT LPAREN string RPAREN .

    $end            reduce using rule 30 (print -> PRINT LPAREN string RPAREN .)


state 81

    (43) if -> IF LPAREN condicion RPAREN . TWOPOINT

    TWOPOINT        shift and go to state 96


state 82

    (48) condicion -> string IN string .

    TWOPOINT        reduce using rule 48 (condicion -> string IN string .)
    RPAREN          reduce using rule 48 (condicion -> string IN string .)


state 83

    (51) condicion -> string IN lista .

    TWOPOINT        reduce using rule 51 (condicion -> string IN lista .)
    RPAREN          reduce using rule 51 (condicion -> string IN lista .)


state 84

    (55) condicion -> NAME IN NAME .

    TWOPOINT        reduce using rule 55 (condicion -> NAME IN NAME .)
    RPAREN          reduce using rule 55 (condicion -> NAME IN NAME .)


state 85

    (49) condicion -> NAME IN lista .

    TWOPOINT        reduce using rule 49 (condicion -> NAME IN lista .)
    RPAREN          reduce using rule 49 (condicion -> NAME IN lista .)


state 86

    (50) condicion -> NAME IN string .

    TWOPOINT        reduce using rule 50 (condicion -> NAME IN string .)
    RPAREN          reduce using rule 50 (condicion -> NAME IN string .)


state 87

    (52) condicion -> number IN string .

    TWOPOINT        reduce using rule 52 (condicion -> number IN string .)
    RPAREN          reduce using rule 52 (condicion -> number IN string .)


state 88

    (53) condicion -> bool IN lista .

    TWOPOINT        reduce using rule 53 (condicion -> bool IN lista .)
    RPAREN          reduce using rule 53 (condicion -> bool IN lista .)


state 89

    (54) condicion -> float IN lista .

    TWOPOINT        reduce using rule 54 (condicion -> float IN lista .)
    RPAREN          reduce using rule 54 (condicion -> float IN lista .)


state 90

    (45) elif -> ELIF LPAREN condicion RPAREN . TWOPOINT

    TWOPOINT        shift and go to state 97


state 91

    (39) for -> FOR LPAREN condicionfor RPAREN . TWOPOINT

    TWOPOINT        shift and go to state 98


state 92

    (41) condicionfor -> NAME COMA NAME . IN funcionitems

    IN              shift and go to state 99


state 93

    (24) contenido -> items COMA contenido .

    RCORCH          reduce using rule 24 (contenido -> items COMA contenido .)


state 94

    (17) info -> keys TWOPOINT items .
    (18) info -> keys TWOPOINT items . COMA info

    DLLAVE          reduce using rule 17 (info -> keys TWOPOINT items .)
    COMA            shift and go to state 100


state 95

    (15) input -> INPUT LPAREN string RPAREN .

    $end            reduce using rule 15 (input -> INPUT LPAREN string RPAREN .)


state 96

    (43) if -> IF LPAREN condicion RPAREN TWOPOINT .

    $end            reduce using rule 43 (if -> IF LPAREN condicion RPAREN TWOPOINT .)


state 97

    (45) elif -> ELIF LPAREN condicion RPAREN TWOPOINT .

    $end            reduce using rule 45 (elif -> ELIF LPAREN condicion RPAREN TWOPOINT .)


state 98

    (39) for -> FOR LPAREN condicionfor RPAREN TWOPOINT .

    $end            reduce using rule 39 (for -> FOR LPAREN condicionfor RPAREN TWOPOINT .)


state 99

    (41) condicionfor -> NAME COMA NAME IN . funcionitems
    (42) funcionitems -> . NAME POINT ITEMS LPAREN RPAREN

    NAME            shift and go to state 101

    funcionitems                   shift and go to state 102

state 100

    (18) info -> keys TWOPOINT items COMA . info
    (17) info -> . keys TWOPOINT items
    (18) info -> . keys TWOPOINT items COMA info
    (19) keys -> . string
    (20) keys -> . number
    (21) keys -> . float
    (33) string -> . COMILLA text COMILLA
    (37) number -> . NUMBER
    (36) float -> . FLOAT

    COMILLA         shift and go to state 25
    NUMBER          shift and go to state 27
    FLOAT           shift and go to state 26

    keys                           shift and go to state 56
    info                           shift and go to state 103
    string                         shift and go to state 57
    number                         shift and go to state 58
    float                          shift and go to state 59

state 101

    (42) funcionitems -> NAME . POINT ITEMS LPAREN RPAREN

    POINT           shift and go to state 104


state 102

    (41) condicionfor -> NAME COMA NAME IN funcionitems .

    TWOPOINT        reduce using rule 41 (condicionfor -> NAME COMA NAME IN funcionitems .)
    RPAREN          reduce using rule 41 (condicionfor -> NAME COMA NAME IN funcionitems .)


state 103

    (18) info -> keys TWOPOINT items COMA info .

    DLLAVE          reduce using rule 18 (info -> keys TWOPOINT items COMA info .)


state 104

    (42) funcionitems -> NAME POINT . ITEMS LPAREN RPAREN

    ITEMS           shift and go to state 105


state 105

    (42) funcionitems -> NAME POINT ITEMS . LPAREN RPAREN

    LPAREN          shift and go to state 106


state 106

    (42) funcionitems -> NAME POINT ITEMS LPAREN . RPAREN

    RPAREN          shift and go to state 107


state 107

    (42) funcionitems -> NAME POINT ITEMS LPAREN RPAREN .

    TWOPOINT        reduce using rule 42 (funcionitems -> NAME POINT ITEMS LPAREN RPAREN .)
    RPAREN          reduce using rule 42 (funcionitems -> NAME POINT ITEMS LPAREN RPAREN .)

